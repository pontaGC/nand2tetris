// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    // ref. https://github.com/youkidearitai/nand2tetris/blob/master/05/CPU.hdl

    // Input data/addressto A register
    DMux(in=true, sel=instruction[15], a=isAcommand, b=isCcommand);
    Mux16(a=instruction, b=ALUout, sel=isCcommand, out=Adata);

    And(a=isCcommand, b=instruction[5], out=load0);
    Or(a=load0, b=isAcommand, out=loadA);
    
    ARegister(in=Adata, load=loadA, out=Aout, out[0..14]=addressM);

    // Input to D register
    And(a=isCcommand, b=instruction[4], out=loadD);
    DRegister(in=ALUout, load=loadD, out=Dout);
    
    // Select ARegister or Memory[A]
    And(a=isCcommand, b=instruction[12], out=memoryflag);
    Mux16(a=Aout, b=inM, sel=memoryflag, out=AMout);
    
    // Compute
    ALU(x=Dout, y=AMout,
        zx=instruction[11],
	nx=instruction[10],
	zy=instruction[9],
	ny=instruction[8],
	f=instruction[7],
	no=instruction[6],
	out=ALUout, out=outM,
	zr=ALUzr,
	ng=ALUng);

    // Write Memory flag
    And(a=isCcommand, b=instruction[3], out=writeM);

    // set PC to fetch next command
    Or(a=ALUzr, b=ALUng, out=zrng);
    Not(in=zrng, out=ALUpg); // ALUpg: if out > 0 then 1

    And(a=ALUpg, b=instruction[0], out=JGT); // if out > 0 then jump
    And(a=ALUzr, b=instruction[1], out=JEQ); // if out = 0 then jump
    And(a=ALUng, b=instruction[2], out=JLT); // if out < 0 then jump
    Or(a=JLT, b=JEQ, out=j0);
    Or(a=j0, b=JGT, out=jump);    
    And(a=isCcommand, b=jump, out=loadPC);

    // if inc=1 and pcLoad=1 then set counter
    PC(in=Aout, inc=true, load=loadPC, reset=reset, out[0..14]=pc, out[15]=unusedbit);
}