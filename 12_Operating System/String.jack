// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {

    field int stringLength;
    field int bufferSize;
    field Array buffer;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength)
    {
	let stringLength = 0;

	if (maxLength = 0)
	{
	   let bufferSize = 1;
	}
	else
	{
	   let bufferSize = maxLength;
	}
	
    	let buffer = Array.new(bufferSize);

	return this;
    }

    /** Disposes this string. */
    method void dispose()
    {
	do buffer.dispose();
	return;
    }

    /** Returns the current length of this string. */
    method int length()
    {
	return stringLength;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j)
    {
        return buffer[j];	
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c)
    {
	let buffer[j] = c;
	return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c)
    {
        if (stringLength < bufferSize)
	{
	    let buffer[stringLength] = c;
	    let stringLength = stringLength + 1;
	}

	return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar()
    {
	if (stringLength > 0)
	{
	    let stringLength = stringLength - 1;
	}

	return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue()
    {
        var int j;
        var int value;
	var boolean isNegative;

	if (stringLength = 0)
	{
	    return 48;
	}

	let isNegative = (buffer[0] = String.hyphen());
	if (isNegative)
	{
	   let j = 1;
	}
	else
	{
	   let j = 0;
	}
	
	let value = 0;
	while(j < stringLength)
	{
	   let value = value * 10 + String.charDecimal(buffer[j]);
	   let j = j + 1;
	   
	   if (~String.isDecimal(buffer[j]))
	   {
	       let j = stringLength;
	   }
	}

	if (isNegative)
	{
	   return -value;
	}

	return value;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val)
    {
        let stringLength = 0;

	if (val < 0)
	{
	   do appendChar(String.hyphen());
	}

	do setNaturalInt(Math.abs(val));
		
	return;
    }

    /** Sets this string to hold a representation of the given Natural integer. */
    method void setNaturalInt(int n)
    {
       	var int q, lastDigit;	
	var char c;

	let q = n/10;
	let lastDigit = n - (q * 10);
	let c = String.decimalChar(lastDigit);

	if (n < 10)
	{
	   do appendChar(c);
	}
	else
	{
	   do setNaturalInt(q);
	   do appendChar(c);
	}

	return;
    }

    /** Returns the new line character. */
    function char newLine()
    {
	return 128;
    }

    /** Returns the backspace character. */
    function char backSpace()
    {
    	return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() 
    {
	return 34;
    }

    /** Returns the double quote (-) character. */
    function char hyphen()
    {
        return 45;
    }

    /** Check whether the character is decimal. 
     *  if the character is decimal, return true,
     *  otherwise, return false. */
    function boolean isDecimal(char c)
    {
        return ~(c < 48) & ~(c > 57); // '0' is 48, '9' is 57
    }

    // Return the integer of the given character
    function int charDecimal(char c)
    {
        return c - 48;
    }   

    // Return the character of the given decimal number
    function char decimalChar(int d)
    {
        return d + 48;
    }   
}
