// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen{
    static int BaseAddress, AddressRange;
    static boolean isBlack;
      
    /** Initializes the Screen. */
    function void init()
    {
	let BaseAddress = 16384;
	let AddressRange = 8192;
	let isBlack = true;
	return;
    }

    /** Erases the entire screen. */
    function void clearScreen()
    {
	var int j;
	
	let j = 0;
	while(j < AddressRange)
	{
	   do Memory.poke(BaseAddress + j, 0); // 0 is white
	   let j = j + 1;
	}

	return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b)
    {
	let isBlack = b;
	return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y)
    {
    	var int q, r;
	var int address, value, mask;

        let q = x / 16;
        let r = x - (q * 16);

	let address = BaseAddress + (y * 32) + q;
	let value = Memory.peek(address);

	if (isBlack)
	{
	     let mask = value | Math.getTwoToThe(r);
	}
	else
	{
	     let mask = value & ~Math.getTwoToThe(r);
	}

	do Memory.poke(address, mask);

	return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2)
    {
	var int dx, dy;
	var int a, b;
        var int yInc, adyMinusbdx;

        if (x1 > x2)
	{
	   do Screen.drawLine(x2, y2, x1, y1);
	   return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;

	if (dy < 0)
	{
	    let yInc = -1;
	}
	else
	{
	    let yInc = 1;
	}

	let a = 0;
	let b = 0;
	
	// Horizontal line
	if (dy = 0) 	
	{
           while (~(a = dx))
	   {
	       do Screen.drawPixel(x1 + a, y1);
	       let a = a + 1;	       
	   }
	   
           return;
        }

	// Verticall line
	if (dx = 0) 	
	{
           while (~(b = dy))
	   {	  
	       do Screen.drawPixel(x1, y1 + b);
               let b = b + yInc;	       
	   }
	   
           return;
        }

	// diagonal line
	let adyMinusbdx = 0;

	while (~(a > dx) & (((yInc = 1) & ~(b > dy)) | ((yInc = -1) & ~(b < dy))))
	{
            do Screen.drawPixel(x1 + a, y1 + b);

	    if (adyMinusbdx < 0)
	    {
                let a = a + 1;
                let adyMinusbdx = adyMinusbdx + (dy * yInc);
            }
	    else
	    {
                let b = b + yInc;
                let adyMinusbdx = adyMinusbdx - dx;
            }
	}
	
	return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2)
    {
	var int dy;
	
	let dy = y1;
	
	while(~(dy = y2))
	{
	    do Screen.drawLine(x1, dy, x2, dy);
    	    let dy = dy+1;
	}

	do Screen.drawLine(x1, y1, x2, y1);
	
	return;		
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r)
    {
	var int dx, dy;
	
	let dy = -r;
	while(~(dy > r))
	{
	    let dx = Math.sqrt((r * r) - (dy * dy));
		
	    do Screen.drawLine(cx - dx, cy + dy, cx + dx, cy + dy);
		
	    let dy = dy + 1;
	}
	
	return;
    }    
}
